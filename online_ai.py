"""
Module x·ª≠ l√Ω c√°c API AI mi·ªÖn ph√≠ cho deployment online
"""

from dataclasses import dataclass
from typing import List, Optional

import requests
import streamlit as st


@dataclass
class Flashcard:
    front: str
    back: str


class OnlineAIGenerator:
    """
    Generator s·ª≠ d·ª•ng c√°c API AI mi·ªÖn ph√≠ c√≥ th·ªÉ deploy online
    """

    def __init__(self):
        # Ch·ªâ s·ª≠ d·ª•ng Gemini API
        self.apis = {
            "gemini": {
                "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent",
                "enabled": True,
                "free": True,
            },
        }

    def generate_with_gemini_free(
        self,
        content: str,
        subject: str,
        num_cards: int = 10,
        language: str = "vi",
        gemini_api_key: Optional[str] = None,
    ) -> List[Flashcard]:
        """
        S·ª≠ d·ª•ng Google Gemini API ƒë·ªÉ t·∫°o flashcards
        """
        try:
            # N·∫øu kh√¥ng c√≥ API key, skip method n√†y
            if not gemini_api_key:
                print("Gemini API key not provided, skipping...")
                return []

            # Template c·∫£i ti·∫øn cho flashcard v·ªõi Gemini
            templates = {
                "vi": {
                    "prompt": f"""T·∫°o {num_cards} th·∫ª ghi nh·ªõ v·ªÅ ch·ªß ƒë·ªÅ "{subject}" t·ª´ n·ªôi dung sau:

{content[:800]}

Y√™u c·∫ßu:
1. M·ªói th·∫ª c√≥ c√¢u h·ªèi r√µ r√†ng v√† c√¢u tr·∫£ l·ªùi ch√≠nh x√°c
2. C√¢u h·ªèi ki·ªÉm tra hi·ªÉu bi·∫øt th·ª±c t·∫ø, kh√¥ng ch·ªâ ghi nh·ªõ m√°y m√≥c
3. C√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
4. ƒê·ªãnh d·∫°ng: Q: [c√¢u h·ªèi] | A: [c√¢u tr·∫£ l·ªùi]
5. M·ªói th·∫ª tr√™n m·ªôt d√≤ng ri√™ng

T·∫°o {num_cards} th·∫ª ghi nh·ªõ:"""
                },
                "en": {
                    "prompt": f"""Create {num_cards} flashcards about "{subject}" from the following content:

{content[:800]}

Requirements:
1. Each card has clear questions and accurate answers
2. Questions test understanding, not just memorization
3. Answers are concise but complete
4. Format: Q: [question] | A: [answer]
5. Each card on a separate line

Create {num_cards} flashcards:"""
                },
            }

            template = templates.get(language, templates["vi"])

            # Google Gemini API endpoint
            api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={gemini_api_key}"

            headers = {
                "Content-Type": "application/json",
            }

            payload = {
                "contents": [{"parts": [{"text": template["prompt"]}]}],
                "generationConfig": {
                    "temperature": 0.7,
                    "topK": 1,
                    "topP": 1,
                    "maxOutputTokens": 2048,
                },
            }

            response = requests.post(api_url, headers=headers, json=payload, timeout=30)

            if response.status_code == 200:
                result = response.json()
                if "candidates" in result and len(result["candidates"]) > 0:
                    generated_text = result["candidates"][0]["content"]["parts"][0][
                        "text"
                    ]

                    if generated_text:
                        flashcards = self._parse_qa_format(generated_text, num_cards)
                        if flashcards and len(flashcards) >= 3:  # √çt nh·∫•t 3 th·∫ª h·ª£p l·ªá
                            print("‚úÖ Success with Gemini API")
                            return flashcards
            else:
                print(f"Gemini API error: {response.status_code} - {response.text}")

            return []

        except Exception as e:
            print(f"Gemini API error: {str(e)}")
            return []

    def _parse_qa_format(self, text: str, num_cards: int) -> List[Flashcard]:
        """
        Parse flashcards from Q: ... A: ... format
        """
        flashcards = []
        lines = text.strip().split("\n")

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # T√¨m pattern Q: ... A: ... ho·∫∑c Q: ... | A: ...
            if "Q:" in line and ("A:" in line or "|" in line):
                try:
                    # Split b·∫±ng | ho·∫∑c A:
                    if "|" in line:
                        parts = line.split("|", 1)
                        question_part = parts[0].strip()
                        answer_part = parts[1].strip()
                    else:
                        parts = line.split("A:", 1)
                        question_part = parts[0].strip()
                        answer_part = parts[1].strip() if len(parts) > 1 else ""

                    # Clean question and answer
                    question = question_part.replace("Q:", "").strip()
                    answer = answer_part.replace("A:", "").strip()

                    if question and answer:
                        flashcards.append(Flashcard(front=question, back=answer))

                except Exception as e:
                    continue

        # N·∫øu kh√¥ng ƒë·ªß th·∫ª, t·∫°o th√™m t·ª´ content
        if len(flashcards) < num_cards:
            additional_needed = num_cards - len(flashcards)
            additional_cards = self._generate_simple_cards_from_content(
                text, additional_needed
            )
            flashcards.extend(additional_cards)

        return flashcards[:num_cards]

    def _generate_simple_cards_from_content(
        self, content: str, count: int
    ) -> List[Flashcard]:
        """Generate simple Q&A pairs from content when AI parsing fails"""
        cards = []
        sentences = [s.strip() for s in content.split(".") if s.strip()]

        for i, sentence in enumerate(sentences[:count]):
            if len(sentence) > 20:  # Only meaningful sentences
                question = f"C√¢u h·ªèi {i+1}: {sentence[:50]}...?"
                answer = sentence
                cards.append(Flashcard(front=question, back=answer))

        return cards

    def generate_flashcards(
        self,
        content: str,
        subject: str,
        num_cards: int = 10,
        language: str = "vi",
        gemini_api_key: Optional[str] = None,
    ) -> List[Flashcard]:
        """
        Main method ƒë·ªÉ t·∫°o flashcards online - ch·ªâ s·ª≠ d·ª•ng Gemini API
        """
        # Ki·ªÉm tra Gemini API key
        if not gemini_api_key:
            st.error("‚ùå C·∫ßn c√≥ Gemini API key ƒë·ªÉ t·∫°o flashcards!")
            return []

        try:
            st.info("ü§ñ ƒêang t·∫°o flashcards v·ªõi Gemini API...")
            flashcards = self.generate_with_gemini_free(
                content, subject, num_cards, language, gemini_api_key
            )

            if flashcards and len(flashcards) >= 3:  # √çt nh·∫•t 3 th·∫ª h·ª£p l·ªá
                st.success("‚úÖ T·∫°o flashcards th√†nh c√¥ng!")
                return flashcards
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o flashcards v·ªõi Gemini API!")
                return []

        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫°o flashcards: {str(e)}")
            return []


# Global instance
online_generator = OnlineAIGenerator()
