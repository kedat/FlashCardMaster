# H·ªá th·ªëng ƒëa ng√¥n ng·ªØ cho FlashCard Master
import json
import os


class LanguageManager:
    def __init__(self):
        self.languages = {
            "vi": "Ti·∫øng Vi·ªát üáªüá≥",
            "en": "English üá∫üá∏", 
            "ja": "Êó•Êú¨Ë™û üáØüáµ",
            "fr": "Fran√ßais üá´üá∑",
        }
        self.current_language = "vi"
        self.translations = self._load_all_translations()

    def _load_all_translations(self):
        """Load all translations"""
        return {            "vi": self._get_vietnamese_translations(),
            "en": self._get_english_translations(), 
            "ja": self._get_japanese_translations(),
            "fr": self._get_french_translations(),
        }

    def set_language(self, lang_code):
        """Set current language"""
        if lang_code in self.languages:
            self.current_language = lang_code
            return True
        return False

    def get_available_languages(self):
        """Get list of available languages"""
        return self.languages

    def get_text(self, key, **kwargs):
        """Get translated text with formatting"""
        try:
            text = self.translations[self.current_language].get(
                key, self.translations["vi"].get(key, key)
            )
            if kwargs:
                return text.format(**kwargs)
            return text
        except:
            return key

    def get_ai_method_text(self, method):
        """Get AI method translation"""
        ai_methods = self.get_text("ai_methods")
        if isinstance(ai_methods, dict):
            return ai_methods.get(method, method)
        return method

    def get_ai_method_help(self, method):
        """Get AI method help text"""
        ai_help = self.get_text("ai_method_help")
        if isinstance(ai_help, dict):
            return ai_help.get(method, "")
        return ""

    def _get_vietnamese_translations(self):
        """Vietnamese translations"""
        return {
            # App basics
            "app_title": "üìö Th·∫ª Ghi Nh·ªõ AI",
            "app_subtitle": "T·∫°o th·∫ª ghi nh·ªõ h·ªçc t·∫≠p t·ª´ n·ªôi dung gi√°o d·ª•c c·ªßa b·∫°n b·∫±ng AI",
            
            # Settings
            "settings": "C√†i ƒê·∫∑t",
            "language": "Ng√¥n ng·ªØ",
            "ai_method": "Ph∆∞∆°ng ph√°p AI",
            "api_key_label": "Google Gemini API Key (t√πy ch·ªçn)",
            "api_key_help": "Ch·ªâ c·∫ßn n·∫øu mu·ªën s·ª≠ d·ª•ng Gemini AI",
            "use_sample_cards": "S·ª≠ d·ª•ng th·∫ª m·∫´u n·∫øu t·∫°o th·∫•t b·∫°i",
            "use_sample_cards_help": "N·∫øu ƒë∆∞·ª£c ch·ªçn, h·ªá th·ªëng s·∫Ω t·∫°o th·∫ª m·∫´u khi AI b·ªã l·ªói",
            
            # Navigation
            "create_flashcards": "T·∫°o Th·∫ª Ghi Nh·ªõ",
            "view_flashcards": "Xem Th·∫ª Ghi Nh·ªõ", 
            "saved_sets": "B·ªô Th·∫ª ƒê√£ L∆∞u",
            "no_flashcards_available": "Kh√¥ng c√≥ th·∫ª ghi nh·ªõ n√†o. H√£y t·∫°o m·ªôt s·ªë th·∫ª tr∆∞·ªõc!",
            
            # Input section
            "create_new_flashcards": "T·∫°o Th·∫ª Ghi Nh·ªõ M·ªõi",
            "select_input_method": "Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:",
            "upload_method": "T·∫£i L√™n File",
            "text_method": "Nh·∫≠p VƒÉn B·∫£n",
            "upload_files": "T·∫£i l√™n file c·ªßa b·∫°n (PDF ho·∫∑c PPT)",
            "upload_success": "ƒê√£ tr√≠ch xu·∫•t n·ªôi dung th√†nh c√¥ng t·ª´ {filename}",
            "upload_error": "L·ªói khi tr√≠ch xu·∫•t n·ªôi dung: {error}",
            "extracted_content": "N·ªôi dung ƒë√£ tr√≠ch xu·∫•t (b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn):",
            "enter_text": "Nh·∫≠p n·ªôi dung h·ªçc t·∫≠p c·ªßa b·∫°n:",
            "subject_topic": "M√¥n h·ªçc/Ch·ªß ƒë·ªÅ:",
            "num_cards": "S·ªë l∆∞·ª£ng th·∫ª ghi nh·ªõ c·∫ßn t·∫°o:",
            
            # Generate
            "generate_btn": "T·∫°o Th·∫ª Ghi Nh·ªõ",
            "content_required": "Vui l√≤ng cung c·∫•p n·ªôi dung ƒë·ªÉ t·∫°o th·∫ª ghi nh·ªõ",
            "generating_auto": "ƒêang t·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng ph√°p t·∫°o th·∫ª t·ªët nh·∫•t...",
            "generating_gemini": "ƒêang t·∫°o th·∫ª ghi nh·ªõ b·∫±ng Gemini AI...",
            "generating_rule": "ƒêang t·∫°o th·∫ª ghi nh·ªõ t·ª± ƒë·ªông...",
            "success_created": "‚úÖ ƒê√£ t·∫°o {count} th·∫ª ghi nh·ªõ th√†nh c√¥ng!",
            "error_creating": "Kh√¥ng th·ªÉ t·∫°o th·∫ª ghi nh·ªõ. Vui l√≤ng th·ª≠ l·∫°i.",
            "error_with_fallback": "L·ªói khi t·∫°o th·∫ª ghi nh·ªõ: {error}",
            "using_sample_fallback": "S·ª≠ d·ª•ng th·∫ª ghi nh·ªõ m·∫´u thay th·∫ø.",
            
            # View section
            "flashcards_title": "Th·∫ª Ghi Nh·ªõ",
            "set_name": "T√™n b·ªô th·∫ª:",
            "save_set": "L∆∞u B·ªô Th·∫ª", 
            "current_set": "B·ªô th·∫ª hi·ªán t·∫°i: {name}",
            "edit_flashcard": "Ch·ªânh S·ª≠a Th·∫ª Ghi Nh·ªõ",
            "front_question": "M·∫∑t tr∆∞·ªõc (C√¢u h·ªèi):",
            "back_answer": "M·∫∑t sau (C√¢u tr·∫£ l·ªùi):",
            "save_changes": "L∆∞u Thay ƒê·ªïi",
            "cancel": "H·ªßy",
            "flip_card": "L·∫≠t Th·∫ª",
            "previous": "‚¨ÖÔ∏è Tr∆∞·ªõc",
            "next": "‚û°Ô∏è Ti·∫øp",
            "edit": "‚úèÔ∏è S·ª≠a",
            "delete": "üóëÔ∏è X√≥a",
            "card_counter": "Th·∫ª {current} trong {total}",
            "no_flashcards": "Kh√¥ng c√≥ th·∫ª ghi nh·ªõ n√†o ƒë·ªÉ hi·ªÉn th·ªã",
            
            # Sets section
            "saved_flashcard_sets": "B·ªô Th·∫ª Ghi Nh·ªõ ƒê√£ L∆∞u",
            "no_saved_sets": "Ch∆∞a c√≥ b·ªô th·∫ª ghi nh·ªõ n√†o ƒë∆∞·ª£c l∆∞u. H√£y t·∫°o v√† l∆∞u m·ªôt s·ªë th·∫ª ghi nh·ªõ tr∆∞·ªõc!",
            "set_name_col": "T√™n B·ªô Th·∫ª",
            "cards_count_col": "S·ªë Th·∫ª",
            "select_set": "Ch·ªçn m·ªôt b·ªô th·∫ª:",
            "load_set": "T·∫£i B·ªô Th·∫ª",
            "delete_set": "X√≥a B·ªô Th·∫ª",
            
            # Set operations
            "set_save_error_name": "Vui l√≤ng nh·∫≠p t√™n cho b·ªô th·∫ª ghi nh·ªõ n√†y",
            "set_save_error_exists": "B·ªô th·∫ª '{name}' ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.",
            "set_save_error_empty": "Kh√¥ng c√≥ th·∫ª ghi nh·ªõ n√†o ƒë·ªÉ l∆∞u",
            "set_save_success": "ƒê√£ l∆∞u {count} th·∫ª ghi nh·ªõ v√†o '{name}'",
            "set_delete_success": "ƒê√£ x√≥a b·ªô th·∫ª '{name}'",
            "set_not_found": "Kh√¥ng t√¨m th·∫•y b·ªô th·∫ª '{name}'",
            
            # AI methods
            "ai_methods": {
                "gemini": "Google Gemini", 
            },
            "ai_method_help": {
                "auto": "T·ª± ƒë·ªông ch·ªçn API AI mi·ªÖn ph√≠ t·ªët nh·∫•t",
                "online": "S·ª≠ d·ª•ng API AI mi·ªÖn ph√≠ online (Cohere, Groq)",
                "gemini": "Google Gemini (c·∫ßn API key)",
                "rule": "T·∫°o t·ª± ƒë·ªông kh√¥ng c·∫ßn AI",
            },
        }

    def _get_english_translations(self):
        """English translations"""
        return {
            # App basics
            "app_title": "üìö AI Flashcards",
            "app_subtitle": "Create study flashcards from your educational content using AI",
            
            # Settings
            "settings": "Settings",
            "language": "Language",
            "ai_method": "AI Method",
            "api_key_label": "Google Gemini API Key (optional)",
            "api_key_help": "Only needed if you want to use Gemini AI",
            "use_sample_cards": "Use sample cards if generation fails",
            "use_sample_cards_help": "If checked, system will generate sample cards when AI fails",
            
            # Navigation
            "create_flashcards": "Create Flashcards",
            "view_flashcards": "View Flashcards",
            "saved_sets": "Saved Sets",
            "no_flashcards_available": "No flashcards available. Create some first!",
            
            # Input section
            "create_new_flashcards": "Create New Flashcards",
            "select_input_method": "Select input method:",
            "upload_method": "Upload Files",
            "text_method": "Enter Text",
            "upload_files": "Upload your files (PDF or PPT)",
            "upload_success": "Successfully extracted content from {filename}",
            "upload_error": "Error extracting content: {error}",
            "extracted_content": "Extracted content (you can edit if needed):",
            "enter_text": "Enter your study content:",
            "subject_topic": "Subject/Topic:",
            "num_cards": "Number of flashcards to generate:",
            
            # Generate
            "generate_btn": "Generate Flashcards",
            "content_required": "Please provide content to generate flashcards",
            "generating_auto": "Automatically selecting best generation method...",
            "generating_online": "Generating flashcards with online AI...",
            "generating_gemini": "Generating flashcards with Gemini AI...",
            "generating_rule": "Generating flashcards automatically...",
            "success_created": "‚úÖ Successfully created {count} flashcards!",
            "error_creating": "Failed to generate flashcards. Please try again.",
            "error_with_fallback": "Error generating flashcards: {error}",
            "using_sample_fallback": "Using sample flashcards instead.",
            
            # View section
            "flashcards_title": "Flashcards",
            "set_name": "Set name:",
            "save_set": "Save Set",
            "current_set": "Current set: {name}",
            "edit_flashcard": "Edit Flashcard",
            "front_question": "Front (Question):",
            "back_answer": "Back (Answer):",
            "save_changes": "Save Changes",
            "cancel": "Cancel",
            "flip_card": "Flip Card",
            "previous": "‚¨ÖÔ∏è Previous",
            "next": "‚û°Ô∏è Next",
            "edit": "‚úèÔ∏è Edit",
            "delete": "üóëÔ∏è Delete",
            "card_counter": "Card {current} of {total}",
            "no_flashcards": "No flashcards to display",
            
            # Sets section
            "saved_flashcard_sets": "Saved Flashcard Sets",
            "no_saved_sets": "No saved flashcard sets yet. Create and save some flashcards first!",
            "set_name_col": "Set Name",
            "cards_count_col": "Cards",
            "select_set": "Select a set:",
            "load_set": "Load Set",
            "delete_set": "Delete Set",
            
            # Set operations
            "set_save_error_name": "Please enter a name for this flashcard set",
            "set_save_error_exists": "Set '{name}' already exists. Please choose a different name.",
            "set_save_error_empty": "No flashcards to save",
            "set_save_success": "Saved {count} flashcards to '{name}'",
            "set_delete_success": "Deleted set '{name}'",
            "set_not_found": "Set '{name}' not found",
            
            # AI methods
            "ai_methods": {
                "auto": "Auto",
                "online": "Online AI",
                "gemini": "Google Gemini",
                "rule": "Rule-based",
            },
            "ai_method_help": {
                "auto": "Automatically choose best free AI API",
                "online": "Use free online AI APIs (Cohere, Groq)",
                "gemini": "Google Gemini (requires API key)",
                "rule": "Auto-generate without AI",
            },
        }

    def _get_japanese_translations(self):
        """Japanese translations"""
        return {
            # App basics
            "app_title": "üìö AIÂçòË™û„Ç´„Éº„Éâ",
            "app_subtitle": "AI„Çí‰Ωø„Å£„Å¶Â≠¶Áøí„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åã„ÇâÂçòË™û„Ç´„Éº„Éâ„Çí‰ΩúÊàê",
            
            # Settings
            "settings": "Ë®≠ÂÆö",
            "language": "Ë®ÄË™û",
            "ai_method": "AIÊñπÊ≥ï",
            "api_key_label": "Google Gemini API„Ç≠„ÉºÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ",
            "api_key_help": "Gemini AI„Çí‰ΩøÁî®„Åô„ÇãÂ†¥Âêà„ÅÆ„ÅøÂøÖË¶Å",
            "use_sample_cards": "ÁîüÊàê„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„Çµ„É≥„Éó„É´„Ç´„Éº„Éâ„Çí‰ΩøÁî®",
            "use_sample_cards_help": "„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã„Å®„ÄÅAIÂ§±ÊïóÊôÇ„Å´„Çµ„É≥„Éó„É´„Ç´„Éº„Éâ„ÇíÁîüÊàê",
            
            # Navigation
            "create_flashcards": "ÂçòË™û„Ç´„Éº„Éâ‰ΩúÊàê",
            "view_flashcards": "ÂçòË™û„Ç´„Éº„ÉâË°®Á§∫",
            "saved_sets": "‰øùÂ≠òÊ∏à„Åø„Çª„ÉÉ„Éà",
            "no_flashcards_available": "ÂçòË™û„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„Åö‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ",
            
            # Input section
            "create_new_flashcards": "Êñ∞„Åó„ÅÑÂçòË™û„Ç´„Éº„Éâ„Çí‰ΩúÊàê",
            "select_input_method": "ÂÖ•ÂäõÊñπÊ≥ï„ÇíÈÅ∏ÊäûÔºö",
            "upload_method": "„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
            "text_method": "„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ",
            "upload_files": "„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÔºàPDF„Åæ„Åü„ÅØPPTÔºâ",
            "upload_success": "{filename}„Åã„Çâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÊ≠£Â∏∏„Å´ÊäΩÂá∫„Åó„Åæ„Åó„Åü",
            "upload_error": "„Ç≥„É≥„ÉÜ„É≥„ÉÑÊäΩÂá∫„Ç®„É©„ÉºÔºö{error}",
            "extracted_content": "ÊäΩÂá∫„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Á∑®ÈõÜÂèØËÉΩÔºâÔºö",
            "enter_text": "Â≠¶Áøí„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂÖ•ÂäõÔºö",
            "subject_topic": "ÁßëÁõÆ/„Éà„Éî„ÉÉ„ÇØÔºö",
            "num_cards": "ÁîüÊàê„Åô„ÇãÂçòË™û„Ç´„Éº„ÉâÊï∞Ôºö",
            
            # Generate
            "generate_btn": "ÂçòË™û„Ç´„Éº„ÉâÁîüÊàê",
            "content_required": "ÂçòË™û„Ç´„Éº„ÉâÁîüÊàê„Å´„ÅØ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåÂøÖË¶Å„Åß„Åô",
            "generating_auto": "ÊúÄÈÅ©„Å™ÁîüÊàêÊñπÊ≥ï„ÇíËá™ÂãïÈÅ∏Êäû‰∏≠...",
            "generating_online": "„Ç™„É≥„É©„Ç§„É≥AI„ÅßÂçòË™û„Ç´„Éº„ÉâÁîüÊàê‰∏≠...",
            "generating_gemini": "Gemini AI„ÅßÂçòË™û„Ç´„Éº„ÉâÁîüÊàê‰∏≠...",
            "generating_rule": "Ëá™Âãï„ÅßÂçòË™û„Ç´„Éº„ÉâÁîüÊàê‰∏≠...",
            "success_created": "‚úÖ {count}Êûö„ÅÆÂçòË™û„Ç´„Éº„Éâ„ÇíÊ≠£Â∏∏„Å´‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ",
            "error_creating": "ÂçòË™û„Ç´„Éº„ÉâÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ",
            "error_with_fallback": "ÂçòË™û„Ç´„Éº„ÉâÁîüÊàê„Ç®„É©„ÉºÔºö{error}",
            "using_sample_fallback": "‰ª£„Çè„Çä„Å´„Çµ„É≥„Éó„É´ÂçòË™û„Ç´„Éº„Éâ„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ",
            
            # View section
            "flashcards_title": "ÂçòË™û„Ç´„Éº„Éâ",
            "set_name": "„Çª„ÉÉ„ÉàÂêçÔºö",
            "save_set": "„Çª„ÉÉ„Éà‰øùÂ≠ò",
            "current_set": "ÁèæÂú®„ÅÆ„Çª„ÉÉ„ÉàÔºö{name}",
            "edit_flashcard": "ÂçòË™û„Ç´„Éº„ÉâÁ∑®ÈõÜ",
            "front_question": "Ë°®Èù¢ÔºàË≥™ÂïèÔºâÔºö",
            "back_answer": "Ë£èÈù¢ÔºàÂõûÁ≠îÔºâÔºö",
            "save_changes": "Â§âÊõ¥„Çí‰øùÂ≠ò",
            "cancel": "„Ç≠„É£„É≥„Çª„É´",
            "flip_card": "„Ç´„Éº„Éâ„ÇíË£èËøî„Åô",
            "previous": "‚¨ÖÔ∏è Ââç„Å∏",
            "next": "‚û°Ô∏è Ê¨°„Å∏",
            "edit": "‚úèÔ∏è Á∑®ÈõÜ",
            "delete": "üóëÔ∏è ÂâäÈô§",
            "card_counter": "„Ç´„Éº„Éâ {current} / {total}",
            "no_flashcards": "Ë°®Á§∫„Åô„ÇãÂçòË™û„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì",
            
            # Sets section
            "saved_flashcard_sets": "‰øùÂ≠òÊ∏à„ÅøÂçòË™û„Ç´„Éº„Éâ„Çª„ÉÉ„Éà",
            "no_saved_sets": "‰øùÂ≠òÊ∏à„Åø„Çª„ÉÉ„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Åæ„ÅöÂçòË™û„Ç´„Éº„Éâ„Çí‰ΩúÊàê„Éª‰øùÂ≠ò„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ",
            "set_name_col": "„Çª„ÉÉ„ÉàÂêç",
            "cards_count_col": "„Ç´„Éº„ÉâÊï∞",
            "select_set": "„Çª„ÉÉ„Éà„ÇíÈÅ∏ÊäûÔºö",
            "load_set": "„Çª„ÉÉ„ÉàË™≠„ÅøËæº„Åø",
            "delete_set": "„Çª„ÉÉ„ÉàÂâäÈô§",
            
            # Set operations
            "set_save_error_name": "„Åì„ÅÆÂçòË™û„Ç´„Éº„Éâ„Çª„ÉÉ„Éà„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
            "set_save_error_exists": "„Çª„ÉÉ„Éà'{name}'„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇÂà•„ÅÆÂêçÂâç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
            "set_save_error_empty": "‰øùÂ≠ò„Åô„ÇãÂçòË™û„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì",
            "set_save_success": "{count}Êûö„ÅÆÂçòË™û„Ç´„Éº„Éâ„Çí'{name}'„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü",
            "set_delete_success": "„Çª„ÉÉ„Éà'{name}'„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü",
            "set_not_found": "„Çª„ÉÉ„Éà'{name}'„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
            
            # AI methods
            "ai_methods": {
                "auto": "Ëá™Âãï",
                "online": "„Ç™„É≥„É©„Ç§„É≥AI",
                "gemini": "Google Gemini",
                "rule": "„É´„Éº„É´„Éô„Éº„Çπ",
            },
            "ai_method_help": {
                "auto": "ÊúÄÈÅ©„Å™ÁÑ°ÊñôAI API„ÇíËá™ÂãïÈÅ∏Êäû",
                "online": "ÁÑ°Êñô„Ç™„É≥„É©„Ç§„É≥AI API„Çí‰ΩøÁî®ÔºàCohere„ÄÅGroqÔºâ",
                "gemini": "Google GeminiÔºàAPI„Ç≠„ÉºÂøÖË¶ÅÔºâ",
                "rule": "AI„Å™„Åó„ÅßËá™ÂãïÁîüÊàê",
            },
        }

    def _get_french_translations(self):
        """French translations"""
        return {
            # App basics
            "app_title": "üìö Cartes M√©moire IA",
            "app_subtitle": "Cr√©ez des cartes m√©moire d'√©tude √† partir de votre contenu √©ducatif avec l'IA",
            
            # Settings
            "settings": "Param√®tres",
            "language": "Langue",
            "ai_method": "M√©thode IA",
            "api_key_label": "Cl√© API Google Gemini (optionnelle)",
            "api_key_help": "N√©cessaire seulement si vous voulez utiliser Gemini IA",
            "use_sample_cards": "Utiliser des cartes d'exemple en cas d'√©chec",
            "use_sample_cards_help": "Si coch√©, g√©n√®re des cartes d'exemple quand l'IA √©choue",
            
            # Navigation
            "create_flashcards": "Cr√©er des Cartes",
            "view_flashcards": "Voir les Cartes",
            "saved_sets": "Jeux Sauvegard√©s",
            "no_flashcards_available": "Aucune carte disponible. Cr√©ez-en d'abord !",
            
            # Input section
            "create_new_flashcards": "Cr√©er de Nouvelles Cartes M√©moire",
            "select_input_method": "S√©lectionnez la m√©thode d'entr√©e :",
            "upload_method": "T√©l√©charger des Fichiers",
            "text_method": "Saisir du Texte",
            "upload_files": "T√©l√©chargez vos fichiers (PDF ou PPT)",
            "upload_success": "Contenu extrait avec succ√®s de {filename}",
            "upload_error": "Erreur d'extraction du contenu : {error}",
            "extracted_content": "Contenu extrait (vous pouvez le modifier si n√©cessaire) :",
            "enter_text": "Entrez votre contenu d'√©tude :",
            "subject_topic": "Sujet/Th√®me :",
            "num_cards": "Nombre de cartes m√©moire √† g√©n√©rer :",
            
            # Generate
            "generate_btn": "G√©n√©rer les Cartes",
            "content_required": "Veuillez fournir du contenu pour g√©n√©rer les cartes",
            "generating_auto": "S√©lection automatique de la meilleure m√©thode...",
            "generating_online": "G√©n√©ration de cartes avec l'IA en ligne...",
            "generating_gemini": "G√©n√©ration de cartes avec Gemini IA...",
            "generating_rule": "G√©n√©ration automatique de cartes...",
            "success_created": "‚úÖ {count} cartes m√©moire cr√©√©es avec succ√®s !",
            "error_creating": "√âchec de la g√©n√©ration des cartes. Veuillez r√©essayer.",
            "error_with_fallback": "Erreur de g√©n√©ration des cartes : {error}",
            "using_sample_fallback": "Utilisation de cartes d'exemple √† la place.",
            
            # View section
            "flashcards_title": "Cartes M√©moire",
            "set_name": "Nom du jeu :",
            "save_set": "Sauvegarder le Jeu",
            "current_set": "Jeu actuel : {name}",
            "edit_flashcard": "Modifier la Carte M√©moire",
            "front_question": "Recto (Question) :",
            "back_answer": "Verso (R√©ponse) :",
            "save_changes": "Sauvegarder les Modifications",
            "cancel": "Annuler",
            "flip_card": "Retourner la Carte",
            "previous": "‚¨ÖÔ∏è Pr√©c√©dent",
            "next": "‚û°Ô∏è Suivant",
            "edit": "‚úèÔ∏è Modifier",
            "delete": "üóëÔ∏è Supprimer",
            "card_counter": "Carte {current} sur {total}",
            "no_flashcards": "Aucune carte m√©moire √† afficher",
            
            # Sets section
            "saved_flashcard_sets": "Jeux de Cartes M√©moire Sauvegard√©s",
            "no_saved_sets": "Aucun jeu sauvegard√©. Cr√©ez et sauvegardez d'abord des cartes !",
            "set_name_col": "Nom du Jeu",
            "cards_count_col": "Cartes",
            "select_set": "S√©lectionnez un jeu :",
            "load_set": "Charger le Jeu",
            "delete_set": "Supprimer le Jeu",
            
            # Set operations
            "set_save_error_name": "Veuillez entrer un nom pour ce jeu de cartes",
            "set_save_error_exists": "Le jeu '{name}' existe d√©j√†. Choisissez un nom diff√©rent.",
            "set_save_error_empty": "Aucune carte √† sauvegarder",
            "set_save_success": "{count} cartes sauvegard√©es dans '{name}'",
            "set_delete_success": "Jeu '{name}' supprim√©",
            "set_not_found": "Jeu '{name}' introuvable",
            
            # AI methods
            "ai_methods": {
                "auto": "Auto",
                "online": "IA En Ligne",
                "gemini": "Google Gemini",
                "rule": "R√®gles",
            },
            "ai_method_help": {
                "auto": "Choisir automatiquement la meilleure API IA gratuite",
                "online": "Utiliser des API IA en ligne gratuites (Cohere, Groq)",
                "gemini": "Google Gemini (n√©cessite une cl√© API)",
                "rule": "G√©n√©ration automatique sans IA",
            },
        }


# Global language manager instance
language_manager = LanguageManager()
